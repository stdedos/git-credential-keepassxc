name: Build and Test

on:
  pull_request:
  push:

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-latest
        rust_toolchain: [stable]
        features: [default, all]
        experimental: [false]
        include:
          - os: ubuntu-latest
            rust_toolchain: nightly
            features: all
            experimental: true
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust Toolchain
        id: rust_toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          components: rustfmt, clippy
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: lint-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.cachekey }}-lock-${{ hashFiles('Cargo.lock') }}-features-${{ matrix.features }}-git-${{ github.sha }}
          restore-keys: |
            lint-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.cachekey }}-lock-${{ hashFiles('Cargo.lock') }}-features-${{ matrix.features }}-
            lint-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.cachekey }}-lock-${{ hashFiles('Cargo.lock') }}-
            lint-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.cachekey }}-
            lint-${{ runner.os }}-
      - name: rustfmt
        shell: bash
        run: |
          cargo fmt -- --check
      - name: Clippy
        shell: bash
        run: |
          cargo clippy --features=${{ matrix.features }} --locked --tests -- -D warnings

  test:
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-latest
        rust_toolchain: [stable]
        features:
          - [default]
          - [all]
          - [notification, encryption, yubikey]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust Toolchain
        id: rust_toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust_toolchain }}
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: test-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.cachekey }}-lock-${{ hashFiles('Cargo.lock') }}-features-${{ join(matrix.features, '+') }}-git-${{ github.sha }}
          restore-keys: |
            test-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.cachekey }}-lock-${{ hashFiles('Cargo.lock') }}-features-${{ join(matrix.features, '+') }}-
            test-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.cachekey }}-lock-${{ hashFiles('Cargo.lock') }}-
            test-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.cachekey }}-
            test-${{ runner.os }}-
      - name: Test
        shell: bash
        run: |
          cargo test --release --features=${{ join(matrix.features) }}

  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-latest
        rust_toolchain: [stable]
        features: [default, notification, yubikey, all]
        experimental: [false]
        include:
          - os: ubuntu-latest
            rust_toolchain: nightly
            features: all
            experimental: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get git version
        id: git-version
        run: echo "GIT_VERSION=$(git describe --tags --always --debug)" | tee -a $GITHUB_ENV

      - name: Install Rust Toolchain
        id: rust_toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust_toolchain }}

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: build-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.cachekey }}-lock-${{ hashFiles('Cargo.lock') }}-features-${{ matrix.features }}-git-${{ github.sha }}
          restore-keys: |
            build-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.cachekey }}-lock-${{ hashFiles('Cargo.lock') }}-features-${{ matrix.features }}-
            build-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.cachekey }}-lock-${{ hashFiles('Cargo.lock') }}-
            build-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.cachekey }}-
            build-${{ runner.os }}-

      - name: "Build (Linux/Windows)"
        shell: bash
        run: |
          cargo build --release --features=${{ matrix.features }}

      - name: Determine artifact name suffix
        id: artifact_suffix
        if: "matrix.features == 'default' || matrix.features == 'all'"
        shell: bash
        run: |
          case "${{ matrix.features }}" in
            default)
              printf 'suffix=%s\n' 'minimal' | tee -a $GITHUB_OUTPUT
              ;;
            all)
              printf 'suffix=%s\n' 'full' | tee -a $GITHUB_OUTPUT
              ;;
            *)
              exit 1
              ;;
          esac

      - name: Rename artifacts
        run: |
          mv target/release/git-credential-keepassxc git-credential-keepassxc_${{ env.GIT_VERSION }}

      - name: Artifacts
        if: "matrix.features == 'default' || matrix.features == 'all'"
        uses: actions/upload-artifact@v4
        with:
          name: git-credential-keepassxc_${{ env.GIT_VERSION }}_${{ matrix.os }}_${{ matrix.rust_toolchain }}_${{ steps.artifact_suffix.outputs.suffix }}
          path: |
            git-credential-keepassxc_${{ env.GIT_VERSION }}
